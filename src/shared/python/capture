# import keyboard
# import pyautogui
# import tkinter as tk
# from PIL import Image
# import os
# import time
# import datetime
# import threading

# lock = threading.Lock()

# def screen_select():
#     root = tk.Tk()
#     root.attributes('-alpha', 0.3)
#     root.attributes("-fullscreen", True)
#     root.configure(bg='gray')

#     start_x = start_y = end_x = end_y = 0
#     rect = None

#     def on_mouse_down(event):
#         nonlocal start_x, start_y, rect
#         start_x, start_y = event.x, event.y
#         rect = canvas.create_rectangle(start_x, start_y, start_x, start_y, outline='red', width=2)

#     def on_mouse_drag(event):
#         nonlocal rect
#         canvas.coords(rect, start_x, start_y, event.x, event.y)

#     def on_mouse_up(event):
#         nonlocal end_x, end_y
#         end_x, end_y = event.x, event.y
#         root.quit()

#     canvas = tk.Canvas(root, cursor="cross")
#     canvas.pack(fill="both", expand=True)

#     canvas.bind("<ButtonPress-1>", on_mouse_down)
#     canvas.bind("<B1-Motion>", on_mouse_drag)
#     canvas.bind("<ButtonRelease-1>", on_mouse_up)

#     root.mainloop()
#     root.destroy()

#     x1, y1 = min(start_x, end_x), min(start_y, end_y)
#     x2, y2 = max(start_x, end_x), max(start_y, end_y)

#     time.sleep(0.2)

#     screenshot = pyautogui.screenshot(region=(x1, y1, x2 - x1, y2 - y1))

#     now = datetime.datetime.now()
#     timestamp = now.strftime("%Y-%m-%d_%H-%M-%S")
#     save_path = os.path.join(os.getcwd(), f"screenshot_{timestamp}.png")
#     screenshot.save(save_path)
#     print(f"Screenshot saved: {save_path}")

# def monitor_user_key():
#     print("Press Ctrl+PrintScreen to take a screenshot, Ctrl+ESC to end application.")
#     keyboard.wait('ctrl+esc')

# def func_s():
#      screen_select()

# def execute_and_lock(func):
#     def wrapper():
#         if lock.locked():
#             print(">>Capture running, await event ends...")
#             return
#         with lock:
#             func()
#     return wrapper

# keyboard.add_hotkey('ctrl+print_screen', execute_and_lock(func_s))